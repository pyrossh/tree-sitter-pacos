================================================================================
primitive
================================================================================

test("primitive") |t|
  a := true
  b := false
  c := nil

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (true))
        (assignment_statement
          (identifier)
          (false))
        (assignment_statement
          (identifier)
          (nil))))))

================================================================================
int
================================================================================

test("int") |t|
  a := +123
  b := -111
  c := 456
  d := 0xcafe
  e := 0b001
  f := 25i

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (unary_operator
            (integer)))
        (assignment_statement
          (identifier)
          (unary_operator
            (integer)))
        (assignment_statement
          (identifier)
          (integer))
        (assignment_statement
          (identifier)
          (integer))
        (assignment_statement
          (identifier)
          (integer))
        (assignment_statement
          (identifier)
          (integer))))))

================================================================================
float
================================================================================

test("float") |t|
  a := +1.2
  b := -0.4
  c := 12.0f
  d := 15.03f

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (unary_operator
            (float)))
        (assignment_statement
          (identifier)
          (float))
        (assignment_statement
          (identifier)
          (float))
        (assignment_statement
          (identifier)
          (float))))))

================================================================================
str
================================================================================

test("str") |t|
  a := "123"
  b := "\x12 \123 \u1234"
  c := """
  A double quote hello,
  without double or single quotes.
  """

--------------------------------------------------------------------------------

(source
  (ERROR
    (ERROR
      (string
        (string_start)
        (string_end))
      (identifier)
      (assignment_statement
        (identifier)
        (string
          (string_start)
          (string_end)))
      (assignment_statement
        (identifier)
        (ERROR
          (string_start)
          (identifier)
          (UNEXPECTED '1'))
        (integer))
      (ERROR
        (UNEXPECTED 'u'))
      (identifier)
      (string
        (string_start)
        (string_end))
      (string
        (string_start)
        (string_end))
      (UNEXPECTED 'A')
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier)
      (identifier))
    (string_start)))

================================================================================
List
================================================================================

test("List") |t|
  a := list.of(1, 2, 3)
  b := list.of(list.of(1), list.of(2), list.of(3))
  c := list.of(1, 2, 3 * 4, 8, n)

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (integer)
              (integer)
              (integer))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer)))
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer)))
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer))))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (integer)
              (integer)
              (binary_operator
                (integer)
                (integer))
              (integer)
              (identifier))))))))

================================================================================
Map
================================================================================

test("Map") |t|
  a := map.of("a" => 1, "b" => 2)
  b := map.of("a" => 1, "b" => map.of("c" => 3, "d" => 4))

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer))
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer)))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer))
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (call
                  (reference
                    (identifier)
                    (identifier))
                  (argument_list
                    (pair_argument
                      (string
                        (string_start)
                        (string_end))
                      (integer))
                    (pair_argument
                      (string
                        (string_start)
                        (string_end))
                      (integer))))))))))))
