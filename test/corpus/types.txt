================================================================================
primitive
================================================================================

test("primitive") |t|
  let a = true
  let b = false
  let c = nil

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (ERROR
          (identifier)
          (typename)
          (true)
          (UNEXPECTED 'l')
          (false)
          (UNEXPECTED 'l')
          (nil))))))

================================================================================
int
================================================================================

test("int") |t|
  a, b, c, d, e, f := +123, -111, 456, 0xcafe, 0b001, 25i

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (identifier)
          (unary_operator
            (integer))
          (unary_operator
            (integer))
          (integer)
          (integer)
          (integer)
          (integer))))))

================================================================================
float
================================================================================

test("float") |t|
  a := +1.2
  b := -0.4
  c := 12.0f
  d := 15.03f

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (unary_operator
            (float)))
        (assignment_statement
          (identifier)
          (float))
        (assignment_statement
          (identifier)
          (float))
        (assignment_statement
          (identifier)
          (float))))))

================================================================================
str
================================================================================

test("str") |t|
  a := str.of("123")
  b := str("\x12 \123 \u1234")
  c := str(`
    A double quote hello,
    without double or single quotes.
  `)

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (ERROR
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (string
                (string_start)
                (string_end)))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier))
            (argument_list
              (ERROR
                (string_start)
                (UNEXPECTED 'x')
                (UNEXPECTED '1')
                (UNEXPECTED 'u')
                (string_start)))))
        (identifier)
        (reference
          (identifier))
        (string_start)
        (genericname)
        (UNEXPECTED 'd'))
      (body
        (ERROR
          (identifier)
          (typename)
          (UNEXPECTED 'o')))))
  (ERROR
    (doc_comment)))

================================================================================
List
================================================================================

test("List") |t|
  a := list.of(1, 2, 3)
  b := list.of(list.of(1), list.of(2), list.of(3))
  c := list.of(1, 2, 3 * 4, 8, n)

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (integer)
              (integer)
              (integer))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer)))
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer)))
              (call
                (reference
                  (identifier)
                  (identifier))
                (argument_list
                  (integer))))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (integer)
              (integer)
              (binary_operator
                (integer)
                (integer))
              (integer)
              (identifier))))))))

================================================================================
Map
================================================================================

test("Map") |t|
  a := map.of("a" => 1, "b" => 2)
  b := map.of("a" => 1, "b" => map.of("c" => 3, "d" => 4))

--------------------------------------------------------------------------------

(source
  (test
    (string
      (string_start)
      (string_end))
    (lambda
      (identifier)
      (body
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer))
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer)))))
        (assignment_statement
          (identifier)
          (call
            (reference
              (identifier)
              (identifier))
            (argument_list
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (integer))
              (pair_argument
                (string
                  (string_start)
                  (string_end))
                (call
                  (reference
                    (identifier)
                    (identifier))
                  (argument_list
                    (pair_argument
                      (string
                        (string_start)
                        (string_end))
                      (integer))
                    (pair_argument
                      (string
                        (string_start)
                        (string_end))
                      (integer))))))))))))
